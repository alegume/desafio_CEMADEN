{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "crZZIxbxBjfR",
        "outputId": "97ca83ab-5d4a-4449-954c-78f22fa5aac2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyvrp\n",
            "  Downloading pyvrp-0.9.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.9 kB)\n",
            "Requirement already satisfied: matplotlib>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from pyvrp) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.15.2 in /usr/local/lib/python3.10/dist-packages (from pyvrp) (1.26.4)\n",
            "Requirement already satisfied: tomli<3.0.0,>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pyvrp) (2.0.1)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.64.1 in /usr/local/lib/python3.10/dist-packages (from pyvrp) (4.66.5)\n",
            "Collecting vrplib<2.0.0,>=1.4.0 (from pyvrp)\n",
            "  Downloading vrplib-1.4.0-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (3.1.4)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=2.2.0->pyvrp) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=2.2.0->pyvrp) (1.16.0)\n",
            "Downloading pyvrp-0.9.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (971 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m971.0/971.0 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading vrplib-1.4.0-py3-none-any.whl (24 kB)\n",
            "Installing collected packages: vrplib, pyvrp\n",
            "Successfully installed pyvrp-0.9.1 vrplib-1.4.0\n"
          ]
        }
      ],
      "source": [
        "!pip install pyvrp"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pyvrp\n",
        "from pyvrp import Model\n",
        "import matplotlib.pyplot as plt\n",
        "from pyvrp.plotting import plot_coordinates\n",
        "from pyvrp.stop import MaxRuntime\n",
        "from pyvrp.plotting import plot_solution\n",
        "import pandas as pd\n",
        "import folium\n",
        "import requests\n",
        "import folium\n",
        "from folium import plugins\n",
        "import math"
      ],
      "metadata": {
        "id": "_9K8ubmocEN8"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# upload file\n",
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "id": "jYg61--s2lSl",
        "outputId": "f2d94d72-5743-4eac-a88b-4aaf6ed67c6b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-1a967863-d34d-4817-a8bd-77a41e617ca2\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-1a967863-d34d-4817-a8bd-77a41e617ca2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving coordenadas.csv to coordenadas.csv\n",
            "Saving distancias.csv to distancias.csv\n",
            "Saving SHAP_agregado.csv to SHAP_agregado.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# csv_file = \"distancias.csv\"\n",
        "# shap_file = \"SHAP_agregado.csv\"\n",
        "# df = pd.read_csv('coordenadas.csv')  # Arquivo CSV com id, nome, latitude, longitude\n",
        "# Function to parse time from string to total minutes\n",
        "def parse_duration(duration_str):\n",
        "    time_parts = duration_str.split()\n",
        "    hours = 0  # Initialize hours to 0\n",
        "    if 'hours' in duration_str: # Check if hours are present\n",
        "        hours = int(time_parts[0].replace('hours', '').strip())\n",
        "        minutes = int(time_parts[2].replace('mins', '').strip())\n",
        "    elif 'hour' in duration_str: # Check if hours are present\n",
        "        hours = int(time_parts[0].replace('hour', '').strip())\n",
        "        minutes = int(time_parts[2].replace('mins', '').strip())\n",
        "    else:\n",
        "        minutes = int(time_parts[0].replace('mins', '').strip()) # Extract minutes directly if < 1h\n",
        "    return hours * 60 + minutes\n",
        "\n",
        "# Load data from CSV\n",
        "def load_csv(file_path):\n",
        "    df = pd.read_csv(file_path)\n",
        "    df['duracao_minutos'] = df['duracao'].apply(parse_duration)\n",
        "    return df\n",
        "\n",
        "\n",
        "def sum_shap_per_location(shap_data, locations):\n",
        "  shap_score = {loc: 0 for loc in locations}\n",
        "\n",
        "  # Calculate the total SHAP value for each location\n",
        "  for _, row in shap_data.iterrows():\n",
        "    location_name = '_'.join(row['Feature'].split('_')[:-1])  # Extract the full location name\n",
        "    if location_name in shap_score:\n",
        "      shap_score[location_name] += row['Mean_SHAP_Value']\n",
        "\n",
        "  # Sort the locations by their SHAP score\n",
        "  sorted_locations = sorted(shap_score.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "  # Determine thresholds for class assignments\n",
        "  num_locations = len(sorted_locations)\n",
        "  class_0_threshold = num_locations // 3\n",
        "  class_1_threshold = 2 * class_0_threshold\n",
        "\n",
        "  shap_class = {}\n",
        "\n",
        "  for i, (loc, score) in enumerate(sorted_locations):\n",
        "    if i < class_0_threshold:\n",
        "      shap_class[loc] = 0  # Highest SHAP scores\n",
        "    elif i < class_1_threshold:\n",
        "      shap_class[loc] = 1  # Medium SHAP scores\n",
        "    else:\n",
        "      shap_class[loc] = 2  # Lowest SHAP scores\n",
        "\n",
        "  return shap_score, shap_class\n",
        "\n",
        "\n",
        "# Function to load SHAP data\n",
        "def load_shap_csv(file_path):\n",
        "    df = pd.read_csv(file_path)\n",
        "    return df\n",
        "\n",
        "def geo_to_cat(lat1, lon1, lat2 = 0, lon2 = 0):\n",
        "  # 1-> origem\n",
        "  # 2-> ponto móvel\n",
        "\n",
        "  dx = (lon1-lon2)*40000*math.cos((lat1+lat2)*math.pi/360)/360\n",
        "  dy = (lat1-lat2)*40000/360\n",
        "  return(dx,dy)\n"
      ],
      "metadata": {
        "id": "lixPL8VZ2oGK"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "csv_file = \"distancias.csv\"\n",
        "shap_file = \"SHAP_agregado.csv\"\n",
        "df = pd.read_csv('coordenadas.csv')\n",
        "\n",
        "data = load_csv(csv_file)\n",
        "# Read the SHAP data\n",
        "shap_data = load_shap_csv(shap_file)\n",
        "(shap_score, shap_class) = sum_shap_per_location(shap_data, data['origem_nome'].unique())\n",
        "locations = pd.concat([data['origem_nome'], data['destino_nome']]).unique()\n",
        "depot_pos = -1\n",
        "depot = locations[depot_pos]\n",
        "n = len(locations)"
      ],
      "metadata": {
        "id": "xXTZ2XpF3Iz8"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dicionario_loc_to_int = {}\n",
        "dicionario_loc_to_class = {}\n",
        "\n",
        "i = 1\n",
        "for loc in locations:\n",
        "  dicionario_loc_to_int.update({loc: i})\n",
        "  i = i+1\n",
        "\n",
        "travel_time = {}\n",
        "for _, row in data.iterrows():\n",
        "  origin, destination = row['origem_nome'], row['destino_nome']\n",
        "  travel_time[(origin, destination)] = row['duracao_minutos']\n",
        "\n",
        "sorted_locations_shap = sorted(shap_score.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "num_locations = len(sorted_locations_shap)\n",
        "class_0_threshold = num_locations // 3\n",
        "class_1_threshold = 2 * class_0_threshold\n",
        "\n",
        "for i, (loc, score) in enumerate(sorted_locations_shap):\n",
        "  if i < class_0_threshold:\n",
        "    dicionario_loc_to_class.update( {loc: ('A', True)} )\n",
        "  elif i < class_1_threshold:\n",
        "    dicionario_loc_to_class.update( {loc: ('B', False)} )\n",
        "  else:\n",
        "    dicionario_loc_to_class.update( {loc: ('C', False)} )\n",
        "\n"
      ],
      "metadata": {
        "id": "CWBu9ypKJFS7"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coord_cart = []\n",
        "flat = df.iat[0,2]\n",
        "flon = df.iat[0,3]\n",
        "\n",
        "for i in range (n):\n",
        "  (dx,dy) = geo_to_cat(df.iat[i,2], df.iat[i,3], flat, flon)\n",
        "  coord_cart.append((dx,dy,locations[i]))"
      ],
      "metadata": {
        "id": "X2sW1QrKCtkK"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "m = Model()\n",
        "\n",
        "depot = m.add_depot(x=coord_cart[-1][0], y=coord_cart[-1][1])\n",
        "m.add_vehicle_type(\n",
        "    3,\n",
        "    start_depot=depot,\n",
        "    end_depot=depot,\n",
        "    max_duration=5*8*60,\n",
        ")\n",
        "\n",
        "clients = [\n",
        "    m.add_client(x=coord_cart[idx][0], y=coord_cart[idx][1], service_duration = 240, prize=10000000*shap_score[coord_cart[idx][2]],required = False, name = coord_cart[idx][2])\n",
        "    for idx in range(n-1)\n",
        "]\n",
        "\n",
        "locations = [depot] + clients\n",
        "\n",
        "for frm in locations:\n",
        "    for to in locations:\n",
        "        #distance = abs(frm.x - to.x) + abs(frm.y - to.y)  # Manhattan\n",
        "        distance = math.dist((frm.x,frm.y), (to.x,to.y))\n",
        "        if frm == to :\n",
        "          m.add_edge(frm, to, distance=distance,duration = 0)\n",
        "        else:\n",
        "          m.add_edge(frm, to, distance=distance,duration = travel_time.get((frm, to), 0))\n",
        "\n",
        "res = m.solve(stop=MaxRuntime(3), display=False)\n",
        "print(res)\n",
        "\n",
        "_, ax = plt.subplots(figsize=(8, 8))\n",
        "plot_solution(res.best, m.data(), plot_clients=True, ax=ax)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V43bsTop3nnS",
        "outputId": "870dd5e0-ae7a-4a53-d01e-4c5489bef70c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution results\n",
            "================\n",
            "    # routes: 2\n",
            "   # clients: 18\n",
            "   objective: 1404\n",
            "    distance: 1404\n",
            "    duration: 4320\n",
            "# iterations: 2160\n",
            "    run-time: 3.00 seconds\n",
            "\n",
            "Routes\n",
            "------\n",
            "Route #1: 7 1 14 9 12 8 13 11 6 17 \n",
            "Route #2: 4 16 5 2 18 15 3 10 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Curvas\n",
        "\n",
        "m = Model()\n",
        "\n",
        "depot = m.add_depot(x=coord_cart[-1][0], y=coord_cart[-1][1])\n",
        "m.add_vehicle_type(\n",
        "    2,\n",
        "    start_depot=depot,\n",
        "    end_depot=depot,\n",
        "    max_duration=5*8*60,\n",
        ")\n",
        "\n",
        "clients = [\n",
        "    m.add_client(x=coord_cart[idx][0], y=coord_cart[idx][1], service_duration = 240, prize=10000000*shap_score[coord_cart[idx][2]],required = dicionario_loc_to_class[coord_cart[idx][2]][1], name = coord_cart[idx][2])\n",
        "    for idx in range(n-1)\n",
        "]\n",
        "\n",
        "locations = [depot] + clients\n",
        "\n",
        "for frm in locations:\n",
        "    for to in locations:\n",
        "        #distance = abs(frm.x - to.x) + abs(frm.y - to.y)  # Manhattan\n",
        "        distance = math.dist((frm.x,frm.y), (to.x,to.y))\n",
        "        if frm == to :\n",
        "          m.add_edge(frm, to, distance=distance,duration = 0)\n",
        "        else:\n",
        "          m.add_edge(frm, to, distance=distance,duration = travel_time.get((frm, to), 0))\n",
        "\n",
        "res = m.solve(stop=MaxRuntime(3), display=False)\n",
        "print(res)\n",
        "\n",
        "_, ax = plt.subplots(figsize=(8, 8))\n",
        "\n",
        "dict_color = {'A': 'r', 'B': 'b', 'C': 'y'}\n",
        "plot_solution(res.best, m.data(), ax=ax)\n",
        "\n",
        "for i in range(n):\n",
        "  ax.scatter(coord_cart[i][0], coord_cart[i][1], color = dict_color[dicionario_loc_to_class[coord_cart[i][2]][0]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 959
        },
        "id": "n7AX-PGYnehL",
        "outputId": "dbdcb81c-cd59-4074-8b21-ef4728ca3b12"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution results\n",
            "================\n",
            "    # routes: 2\n",
            "   # clients: 18\n",
            "   objective: 1404\n",
            "    distance: 1404\n",
            "    duration: 4320\n",
            "# iterations: 2076\n",
            "    run-time: 3.00 seconds\n",
            "\n",
            "Routes\n",
            "------\n",
            "Route #1: 10 3 15 18 2 5 16 4 \n",
            "Route #2: 7 1 14 9 12 8 13 11 6 17 \n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}